name: Tecton Multi-Region CICD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ---------- PLAN JOBS (one per region) ----------
  plan-reg1:
    name: Plan (REG1)
    runs-on: ubuntu-latest
    outputs:
      planid: ${{ steps.extract-planid.outputs.planid }}
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG1 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG1 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG1 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select "$WORKSPACE"
      - name: Run Tecton plan
        run: tecton plan --json-out plan.json
      - name: Extract plan ID
        id: extract-planid
        run: |
          PLANID=$(jq -r .plan_id < plan.json)
          echo "planid=$PLANID" >> "$GITHUB_OUTPUT"

  plan-reg2:
    name: Plan (REG2)
    runs-on: ubuntu-latest
    outputs:
      planid: ${{ steps.extract-planid.outputs.planid }}
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG2 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG2 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG2 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select "$WORKSPACE"
      - name: Run Tecton plan
        run: tecton plan --json-out plan.json
      - name: Extract plan ID
        id: extract-planid
        run: |
          PLANID=$(jq -r .plan_id < plan.json)
          echo "planid=$PLANID" >> "$GITHUB_OUTPUT"

  # ---------- GATE: BOTH PLANS MUST SUCCEED ----------
  verify-plans:
    name: Verify plans
    runs-on: ubuntu-latest
    needs: [plan-reg1, plan-reg2]
    outputs:
      planid_reg1: ${{ needs.plan-reg1.outputs.planid }}
      planid_reg2: ${{ needs.plan-reg2.outputs.planid }}
    steps:
      - name: Ensure both plans succeeded
        run: |
          echo "REG1 plan result: ${{ needs.plan-reg1.result }}"
          echo "REG2 plan result: ${{ needs.plan-reg2.result }}"
          if [ "${{ needs.plan-reg1.result }}" != "success" ] || \
             [ "${{ needs.plan-reg2.result }}" != "success" ]; then
            echo "One or both plans failed; blocking apply."
            exit 1
          fi
          echo "Both plans succeeded."

  # ---------- APPLY JOBS (fan-out from verify-plans) ----------
  apply-reg1:
    name: Apply (REG1)
    needs: verify-plans
    if: github.ref == 'refs/heads/main' # only apply on push to main
    runs-on: ubuntu-latest
    environment:
      name: prod-apply-reg1
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG1 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG1 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG1 }}
      PLANID: ${{ needs.verify-plans.outputs.planid_reg1 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select "$WORKSPACE"
      - name: Apply plan
        run: tecton apply -y --plan-id "$PLANID"

  apply-reg2:
    name: Apply (REG2)
    needs: verify-plans
    if: github.ref == 'refs/heads/main' # only apply on push to main
    runs-on: ubuntu-latest
    environment:
      name: prod-apply-reg2
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG2 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG2 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG2 }}
      PLANID: ${{ needs.verify-plans.outputs.planid_reg2 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select "$WORKSPACE"

      # ---- Failure new gate for REG2 (toggle via repo/env variable) ----
      - name: Force REG2 to fail (demo)
        if: ${{ vars.FORCE_FAIL_REG2 == 'true' }}
        run: |
          echo "Intentionally failing REG2 deployment because FORCE_FAIL_REG2=true"
          exit 1

      - name: Apply plan
        run: tecton apply -y --plan-id "$PLANID"

  # ---------- POST CHECK / SPLIT-HANDLING ----------
  post-check:
    name: Post-check (detect split success/failure)
    needs: [verify-plans, apply-reg1, apply-reg2]
    if: ${{ always() }}  # always run to evaluate results
    runs-on: ubuntu-latest
    steps:
      - name: Summarize results
        run: |
          echo "apply-reg1: ${{ needs.apply-reg1.result }}"
          echo "apply-reg2: ${{ needs.apply-reg2.result }}"

      - name: Handle split success (REG1 success, REG2 failure)
        if: ${{ needs.apply-reg1.result == 'success' && needs.apply-reg2.result == 'failure' }}
        run: |
          echo "REG1 succeeded while REG2 failed. Add remediation here."
          # tecton workspace select "${{ vars.WORKSPACE_REG1 }}"
          # tecton <some-command>

      - name: Handle split success (REG2 success, REG1 failure)
        if: ${{ needs.apply-reg2.result == 'success' && needs.apply-reg1.result == 'failure' }}
        run: |
          echo "REG2 succeeded while REG1 failed. Add remediation here."
          # tecton workspace select "${{ vars.WORKSPACE_REG2 }}"
          # tecton <some-command>

      - name: No split (both success or both failed)
        if: ${{ !(
              (needs.apply-reg1.result == 'success' && needs.apply-reg2.result == 'failure') ||
              (needs.apply-reg2.result == 'success' && needs.apply-reg1.result == 'failure')
            ) }}
        run: echo "No split condition detected."
