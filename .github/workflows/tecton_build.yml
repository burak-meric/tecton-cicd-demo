name: Tecton Multi-Region CICD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  plan-reg1:
    name: Plan (REG1)
    runs-on: ubuntu-latest
    outputs:
      planid: ${{ steps.extract-planid.outputs.planid }}
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG1 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG1 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG1 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select $WORKSPACE
      - name: Run Tecton plan
        run: tecton plan --json-out plan.json
      - name: Extract plan ID
        id: extract-planid
        run: |
          PLANID=$(jq -r .plan_id < plan.json)
          echo "planid=$PLANID" >> $GITHUB_OUTPUT

  plan-reg2:
    name: Plan (REG2)
    runs-on: ubuntu-latest
    outputs:
      planid: ${{ steps.extract-planid.outputs.planid }}
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG2 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG2 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG2 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select $WORKSPACE
      - name: Run Tecton plan
        run: tecton plan --json-out plan.json
      - name: Extract plan ID
        id: extract-planid
        run: |
          PLANID=$(jq -r .plan_id < plan.json)
          echo "planid=$PLANID" >> $GITHUB_OUTPUT

  # ---- Gate: ensure BOTH plans succeeded before deploying ----
  plans-ok:
    name: Verify plans
    needs: [plan-reg1, plan-reg2]
    runs-on: ubuntu-latest
    if: ${{ always() }}  # run to check results even if a plan failed
    steps:
      - name: Check plan results
        run: |
          echo "REG1=${{ needs['plan-reg1'].result }}  REG2=${{ needs['plan-reg2'].result }}"
          if [ "${{ needs['plan-reg1'].result }}" != "success" ] || [ "${{ needs['plan-reg2'].result }}" != "success" ]; then
            echo "One or both plans failed â€” blocking deployments."
            exit 1
          fi

  apply-reg1:
    name: Apply (REG1)
    needs: [plans-ok, plan-reg1]     # gate + its own plan (for planid)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: prod-apply-reg1
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG1 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG1 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG1 }}
      PLANID: ${{ needs.plan-reg1.outputs.planid }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select $WORKSPACE
      - name: Apply plan
        run: tecton apply -y --plan-id $PLANID

  apply-reg2:
    name: Apply (REG2)
    needs: [plans-ok, plan-reg2]     # gate + its own plan (for planid)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: prod-apply-reg2
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY_REG2 }}
      API_SERVICE: ${{ vars.API_SERVICE_REG2 }}
      WORKSPACE: ${{ vars.WORKSPACE_REG2 }}
      PLANID: ${{ needs.plan-reg2.outputs.planid }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
      - name: Install Tecton CLI
        run: pip install -r requirements.txt
      - name: Select workspace
        run: tecton workspace select $WORKSPACE
      # Force REG2 to fail (for testing)
      - name: Force fail REG2
        run: echo "Intentionally failing REG2 deployment" && exit 1
      - name: Apply plan
        run: tecton apply -y --plan-id $PLANID

  post-check:
    needs: [apply-reg1, apply-reg2, plan-reg1, plan-reg2]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Detect split success
        id: split
        run: |
          echo "r1=${{ needs.apply-reg1.result }} r2=${{ needs.apply-reg2.result }}"
          if [ "${{ needs.apply-reg1.result }}" = "success" ] && [ "${{ needs.apply-reg2.result }}" = "failure" ]; then
            echo "split=reg1" >> $GITHUB_OUTPUT
          elif [ "${{ needs.apply-reg1.result }}" = "failure" ] && [ "${{ needs.apply-reg2.result }}" = "success" ]; then
            echo "split=reg2" >> $GITHUB_OUTPUT
          else
            echo "split=none" >> $GITHUB_OUTPUT
          fi
